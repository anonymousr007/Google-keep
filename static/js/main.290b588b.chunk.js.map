{"version":3,"sources":["GoogleKeep/logo.png","GoogleKeep/Header.jsx","GoogleKeep/Footer.jsx","GoogleKeep/Createnote.jsx","GoogleKeep/Note.jsx","GoogleKeep/App.jsx","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","width","height","Footer","year","Date","getFullYear","href","Createnote","props","useState","title","content","note","setnote","inputEvent","event","target","name","value","oldData","type","onChange","placeholder","autoComplete","rows","column","Button","onClick","passNote","Note","deleteItem","id","App","addItem","setaddItem","onDelete","prevData","filter","currentdata","indx","map","val","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4FAAAA,EAAOC,QAAU,IAA0B,kC,6KCY5BC,EATA,WACb,OACE,oCACE,yBAAKC,UAAU,UACb,yBAAKC,IAAKC,IAAMC,IAAI,OAAOC,MAAM,KAAKC,OAAO,UCOtCC,EAbA,WACb,IAAIC,GAAO,IAAIC,MAAOC,cACtB,OACE,oCACE,yBAAKT,UAAU,UACb,6CACeO,EADf,MAEE,uBAAGG,KAAK,4CAAR,oB,yCC4CKC,EAhDI,SAACC,GAAW,IAAD,EACJC,mBAAS,CAC/BC,MAAO,GACPC,QAAS,KAHiB,mBACrBC,EADqB,KACfC,EADe,KAKtBC,EAAa,SAACC,GAAW,IAAD,EACJA,EAAMC,OAAtBC,EADoB,EACpBA,KAAMC,EADc,EACdA,MACdL,GAAQ,SAACM,GACP,OAAO,2BAAKA,GAAZ,kBAAsBF,EAAOC,QAUjC,OACE,oCACE,yBAAKtB,UAAU,aACb,8BACE,2BACEwB,KAAK,OACLH,KAAK,QACLC,MAAON,EAAKF,MACZW,SAAUP,EACVQ,YAAY,QACZC,aAAa,QAEf,6BACA,8BACEC,KAAK,GACLC,OAAO,GACPR,KAAK,UACLC,MAAON,EAAKD,QACZU,SAAUP,EACVQ,YAAY,iBAEd,6BACA,kBAACI,EAAA,EAAD,CAAQC,QA7BC,WACfnB,EAAMoB,SAAShB,GACfC,EAAQ,CACNH,MAAO,GACPC,QAAS,OA0BH,kBAAC,IAAD,CAASf,UAAU,mB,iBC1BhBiC,EAjBF,SAACrB,GAIZ,OACE,oCACE,yBAAKZ,UAAU,QACb,4BAAKY,EAAME,OACX,6BACA,2BAAIF,EAAMG,SACV,4BAAQf,UAAU,MAAM+B,QATX,WACjBnB,EAAMsB,WAAWtB,EAAMuB,MASjB,kBAAC,IAAD,CAAmBnC,UAAU,mBC2BxBoC,EAnCH,WAAO,IAAD,EACcvB,mBAAS,IADvB,mBACTwB,EADS,KACAC,EADA,KAQVC,EAAW,SAACJ,GAChBG,GAAW,SAACE,GACVA,EAASC,QAAO,SAACC,EAAaC,GAC5B,OAAOA,IAASR,SAKtB,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAYH,SAjBA,SAAChB,GAEfsB,GAAW,SAACf,GACV,MAAM,GAAN,mBAAWA,GAAX,CAAoBP,UAenBqB,EAAQO,KAAI,SAACC,EAAKC,GACjB,OACE,kBAAC,EAAD,CACEC,IAAKD,EACLX,GAAIW,EACJhC,MAAO+B,EAAI/B,MACXC,QAAS8B,EAAI9B,QACbmB,WAAYK,OAIlB,kBAAC,EAAD,QCxBcS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.290b588b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c6182a4a.png\";","import React from \"react\";\r\nimport logo from \"./logo.png\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <div className=\"header\">\r\n        <img src={logo} alt=\"logo\" width=\"70\" height=\"50\" />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Header;\r\n","import React from \"react\";\r\nconst Footer = () => {\r\n  let year = new Date().getFullYear();\r\n  return (\r\n    <>\r\n      <div className=\"footer\">\r\n        <p>\r\n          Copyright Â© {year} by\r\n          <a href=\"https://www.facebook.com/varun.kumar9811\"> Varun kumar</a>\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\n// import Note from \"./Note\";\r\nconst Createnote = (props) => {\r\n  const [note, setnote] = useState({\r\n    title: \"\",\r\n    content: \"\",\r\n  });\r\n  const inputEvent = (event) => {\r\n    const { name, value } = event.target;\r\n    setnote((oldData) => {\r\n      return { ...oldData, [name]: value };\r\n    });\r\n  };\r\n  const addEvent = () => {\r\n    props.passNote(note);\r\n    setnote({\r\n      title: \"\",\r\n      content: \"\",\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"main_note\">\r\n        <form>\r\n          <input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            value={note.title}\r\n            onChange={inputEvent}\r\n            placeholder=\"Title\"\r\n            autoComplete=\"off\"\r\n          />\r\n          <br />\r\n          <textarea\r\n            rows=\"\"\r\n            column=\"\"\r\n            name=\"content\"\r\n            value={note.content}\r\n            onChange={inputEvent}\r\n            placeholder=\"Write a note\"\r\n          ></textarea>\r\n          <br />\r\n          <Button onClick={addEvent}>\r\n            <AddIcon className=\"plus_sign\" />\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Createnote;\r\n","import React from \"react\";\r\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\r\nconst Note = (props) => {\r\n  const deletenote = () => {\r\n    props.deleteItem(props.id);\r\n  };\r\n  return (\r\n    <>\r\n      <div className=\"note\">\r\n        <h1>{props.title}</h1>\r\n        <br />\r\n        <p>{props.content}</p>\r\n        <button className=\"btn\" onClick={deletenote}>\r\n          <DeleteOutlineIcon className=\"deleteIcon\" />\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default Note;\r\n","import React, { useState } from \"react\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Createnote from \"./Createnote\";\r\nimport Note from \"./Note\";\r\nconst App = () => {\r\n  const [addItem, setaddItem] = useState([]);\r\n  const addnote = (note) => {\r\n    // alert(\"i am clicked\");\r\n    setaddItem((oldData) => {\r\n      return [...oldData, note];\r\n    });\r\n  };\r\n  const onDelete = (id) => {\r\n    setaddItem((prevData) => {\r\n      prevData.filter((currentdata, indx) => {\r\n        return indx !== id;\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <Createnote passNote={addnote} />\r\n      {addItem.map((val, index) => {\r\n        return (\r\n          <Note\r\n            key={index}\r\n            id={index}\r\n            title={val.title}\r\n            content={val.content}\r\n            deleteItem={onDelete}\r\n          />\r\n        );\r\n      })}\r\n      <Footer />\r\n    </>\r\n  );\r\n};\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./GoogleKeep/index.css\";\nimport App from \"./GoogleKeep/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}